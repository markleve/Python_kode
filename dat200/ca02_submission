{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Compulsory assignment 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Author: Marie Klever"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following notebook presents my answer for the compulsory assigment 2 in DAT200.\n",
    "\n",
    "Task: train different classifiers that predict the outcome of randomly selected shots made by Kobe Bryant, a former basketball player. Possible outcomes are 0 (missed shot) and 1 (shot made)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preparations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loading libraries\n",
    "Loading the libraries to be used in this assignment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline \n",
    "\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "from scipy.misc import imread\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler, LabelBinarizer\n",
    "from sklearn.model_selection import train_test_split, ParameterGrid\n",
    "from sklearn.feature_selection import VarianceThreshold, RFE, SelectFromModel\n",
    "\n",
    "# Classification algorithms\n",
    "from sklearn.svm import SVC, LinearSVC\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.linear_model import Perceptron, LogisticRegression\n",
    "\n",
    "sns.set_style(\"whitegrid\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loading the dataset\n",
    "Reading the dataset \"KB_data.csv\" to be used in the assignment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv(\"KB_data.csv\")\n",
    "data.set_index('shot_id', inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at some of the data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>combined_shot_type</th>\n",
       "      <th>loc_x</th>\n",
       "      <th>loc_y</th>\n",
       "      <th>minutes_remaining</th>\n",
       "      <th>period</th>\n",
       "      <th>playoffs</th>\n",
       "      <th>season</th>\n",
       "      <th>seconds_remaining</th>\n",
       "      <th>shot_distance</th>\n",
       "      <th>shot_made_flag</th>\n",
       "      <th>shot_type</th>\n",
       "      <th>shot_zone_area</th>\n",
       "      <th>shot_zone_range</th>\n",
       "      <th>opponent</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>shot_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jump Shot</td>\n",
       "      <td>-157</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2000-01</td>\n",
       "      <td>22</td>\n",
       "      <td>15</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2PT Field Goal</td>\n",
       "      <td>Left Side(L)</td>\n",
       "      <td>8-16 ft.</td>\n",
       "      <td>POR</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        combined_shot_type  loc_x  loc_y  minutes_remaining  period  playoffs  \\\n",
       "shot_id                                                                         \n",
       "2                Jump Shot   -157      0                 10       1         0   \n",
       "\n",
       "          season  seconds_remaining  shot_distance  shot_made_flag  \\\n",
       "shot_id                                                              \n",
       "2        2000-01                 22             15             0.0   \n",
       "\n",
       "              shot_type shot_zone_area shot_zone_range opponent  \n",
       "shot_id                                                          \n",
       "2        2PT Field Goal   Left Side(L)        8-16 ft.      POR  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "combined_shot_type     object\n",
       "loc_x                   int64\n",
       "loc_y                   int64\n",
       "minutes_remaining       int64\n",
       "period                  int64\n",
       "playoffs                int64\n",
       "season                 object\n",
       "seconds_remaining       int64\n",
       "shot_distance           int64\n",
       "shot_made_flag        float64\n",
       "shot_type              object\n",
       "shot_zone_area         object\n",
       "shot_zone_range        object\n",
       "opponent               object\n",
       "dtype: object"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Changing some of the datatype from numeric to categorical to get a more descriptive statistic. Also changig all datatypes from object to categorical:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "data[\"period\"] = data[\"period\"].astype(\"category\")\n",
    "data[\"playoffs\"] = data[\"playoffs\"].astype(\"category\")\n",
    "data[\"shot_made_flag\"] = data[\"shot_made_flag\"].astype(\"category\")\n",
    "\n",
    "data = pd.concat([data.select_dtypes([], [\"object\"]), \n",
    "                  data.select_dtypes([\"object\"]).apply(pd.Series.astype, dtype=\"category\")], \n",
    "                 axis=1).reindex_axis(data.columns, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "combined_shot_type    category\n",
       "loc_x                    int64\n",
       "loc_y                    int64\n",
       "minutes_remaining        int64\n",
       "period                category\n",
       "playoffs              category\n",
       "season                category\n",
       "seconds_remaining        int64\n",
       "shot_distance            int64\n",
       "shot_made_flag        category\n",
       "shot_type             category\n",
       "shot_zone_area        category\n",
       "shot_zone_range       category\n",
       "opponent              category\n",
       "dtype: object"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summarizing and looking at statistics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data statistics\n",
    "The dimensions of the dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(25697, 14)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the statistics for the numerical columns:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loc_x</th>\n",
       "      <th>loc_y</th>\n",
       "      <th>minutes_remaining</th>\n",
       "      <th>seconds_remaining</th>\n",
       "      <th>shot_distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>25697.000000</td>\n",
       "      <td>25697.000000</td>\n",
       "      <td>25697.000000</td>\n",
       "      <td>25697.000000</td>\n",
       "      <td>25697.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>7.148422</td>\n",
       "      <td>91.257345</td>\n",
       "      <td>4.886796</td>\n",
       "      <td>28.311554</td>\n",
       "      <td>13.457096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>110.073147</td>\n",
       "      <td>88.152106</td>\n",
       "      <td>3.452475</td>\n",
       "      <td>17.523392</td>\n",
       "      <td>9.388725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-250.000000</td>\n",
       "      <td>-44.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-67.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>74.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>15.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>94.000000</td>\n",
       "      <td>160.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>43.000000</td>\n",
       "      <td>21.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>248.000000</td>\n",
       "      <td>791.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>59.000000</td>\n",
       "      <td>79.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              loc_x         loc_y  minutes_remaining  seconds_remaining  \\\n",
       "count  25697.000000  25697.000000       25697.000000       25697.000000   \n",
       "mean       7.148422     91.257345           4.886796          28.311554   \n",
       "std      110.073147     88.152106           3.452475          17.523392   \n",
       "min     -250.000000    -44.000000           0.000000           0.000000   \n",
       "25%      -67.000000      4.000000           2.000000          13.000000   \n",
       "50%        0.000000     74.000000           5.000000          28.000000   \n",
       "75%       94.000000    160.000000           8.000000          43.000000   \n",
       "max      248.000000    791.000000          11.000000          59.000000   \n",
       "\n",
       "       shot_distance  \n",
       "count   25697.000000  \n",
       "mean       13.457096  \n",
       "std         9.388725  \n",
       "min         0.000000  \n",
       "25%         5.000000  \n",
       "50%        15.000000  \n",
       "75%        21.000000  \n",
       "max        79.000000  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe(include=\"number\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the statistics for the object columns:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>combined_shot_type</th>\n",
       "      <th>period</th>\n",
       "      <th>playoffs</th>\n",
       "      <th>season</th>\n",
       "      <th>shot_made_flag</th>\n",
       "      <th>shot_type</th>\n",
       "      <th>shot_zone_area</th>\n",
       "      <th>shot_zone_range</th>\n",
       "      <th>opponent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>25697</td>\n",
       "      <td>25697</td>\n",
       "      <td>25697</td>\n",
       "      <td>25697</td>\n",
       "      <td>20697.0</td>\n",
       "      <td>25697</td>\n",
       "      <td>25697</td>\n",
       "      <td>25697</td>\n",
       "      <td>25697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Jump Shot</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2005-06</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2PT Field Goal</td>\n",
       "      <td>Center(C)</td>\n",
       "      <td>Less Than 8 ft.</td>\n",
       "      <td>SAS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>19710</td>\n",
       "      <td>7002</td>\n",
       "      <td>21939</td>\n",
       "      <td>1924</td>\n",
       "      <td>11463.0</td>\n",
       "      <td>20285</td>\n",
       "      <td>11289</td>\n",
       "      <td>7857</td>\n",
       "      <td>1638</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       combined_shot_type  period  playoffs   season  shot_made_flag  \\\n",
       "count               25697   25697     25697    25697         20697.0   \n",
       "unique                  6       7         2       20             2.0   \n",
       "top             Jump Shot       3         0  2005-06             0.0   \n",
       "freq                19710    7002     21939     1924         11463.0   \n",
       "\n",
       "             shot_type shot_zone_area  shot_zone_range opponent  \n",
       "count            25697          25697            25697    25697  \n",
       "unique               2              6                5       33  \n",
       "top     2PT Field Goal      Center(C)  Less Than 8 ft.      SAS  \n",
       "freq             20285          11289             7857     1638  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe(include=\"category\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data statistics visualization\n",
    "Looking at the distribution of the target column \"shot_made_flag\":"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10bd84cc0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x=\"shot_made_flag\", data=data)\n",
    "plt.title(\"Distribution of target column\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the distribution of the numerical columns using box plots. The green triangle shows the mean value:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11310e0f0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "f, axes = plt.subplots(1, 5, figsize=(20, 5))\n",
    "\n",
    "sns.boxplot(x=\"shot_made_flag\", y=\"loc_x\", data=data, showmeans=True, ax=axes[0]).set_title(\"Loc x\")\n",
    "sns.boxplot(x=\"shot_made_flag\", y=\"loc_y\", data=data, showmeans=True, ax=axes[1]).set_title(\"Loc y\")\n",
    "sns.boxplot(x=\"shot_made_flag\", y=\"minutes_remaining\", data=data, showmeans=True, ax=axes[2]).set_title(\"Minutes remaining\")\n",
    "sns.boxplot(x=\"shot_made_flag\", y=\"seconds_remaining\", data=data, showmeans=True, ax=axes[3]).set_title(\"Seconds remaining\")\n",
    "sns.boxplot(x=\"shot_made_flag\", y=\"shot_distance\", data=data, showmeans=True, ax=axes[4]).set_title(\"Shot distance\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the distribution of the categorical columns:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x113519748>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1135195c0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "f1, axes = plt.subplots(6, figsize=(15, 25))\n",
    "f2, axees = plt.subplots(1, 2, figsize=(15, 3))\n",
    "\n",
    "sns.countplot(x=\"opponent\", hue=\"shot_made_flag\", data=data, ax=axes[0]).set_title(\"Season\")\n",
    "sns.countplot(x=\"season\", hue=\"shot_made_flag\", data=data, ax=axes[1]).set_title(\"Season\")\n",
    "sns.countplot(x=\"period\", hue=\"shot_made_flag\", data=data, ax=axes[2]).set_title(\"Period\")\n",
    "sns.countplot(x=\"shot_zone_range\", hue=\"shot_made_flag\", data=data, ax=axes[3]).set_title(\"Shot zone range\")\n",
    "sns.countplot(x=\"combined_shot_type\", hue=\"shot_made_flag\", data=data, ax=axes[4]).set_title(\"Combined shot type\")\n",
    "sns.countplot(x=\"shot_zone_area\", hue=\"shot_made_flag\", data=data, ax=axes[5]).set_title(\"Shot zone area\")\n",
    "sns.countplot(x=\"playoffs\", hue=\"shot_made_flag\", data=data, ax=axees[0]).set_title(\"Playoffs\")\n",
    "sns.countplot(x=\"shot_type\", hue=\"shot_made_flag\", data=data, ax=axees[1]).set_title(\"Shot type\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prepare data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finding the indexes of the testing data, so the dataset can later be split:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_data_index = data[\"shot_made_flag\"].isnull()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Preprocessing the whole dataset. Will later remove the rows that belong to the test data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_prep = data.copy()\n",
    "target = data_prep[\"shot_made_flag\"].copy()\n",
    "data_prep.drop(\"shot_made_flag\", axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['combined_shot_type', 'loc_x', 'loc_y', 'minutes_remaining', 'period',\n",
       "       'playoffs', 'season', 'seconds_remaining', 'shot_distance', 'shot_type',\n",
       "       'shot_zone_area', 'shot_zone_range', 'opponent'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_prep.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>combined_shot_type</th>\n",
       "      <th>shot_distance</th>\n",
       "      <th>loc_x</th>\n",
       "      <th>loc_y</th>\n",
       "      <th>period</th>\n",
       "      <th>shot_zone_area</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>shot_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jump Shot</td>\n",
       "      <td>15</td>\n",
       "      <td>-157</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Left Side(L)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Jump Shot</td>\n",
       "      <td>16</td>\n",
       "      <td>-101</td>\n",
       "      <td>135</td>\n",
       "      <td>1</td>\n",
       "      <td>Left Side Center(LC)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Jump Shot</td>\n",
       "      <td>22</td>\n",
       "      <td>138</td>\n",
       "      <td>175</td>\n",
       "      <td>1</td>\n",
       "      <td>Right Side Center(RC)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Dunk</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Center(C)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Jump Shot</td>\n",
       "      <td>14</td>\n",
       "      <td>-145</td>\n",
       "      <td>-11</td>\n",
       "      <td>3</td>\n",
       "      <td>Left Side(L)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        combined_shot_type  shot_distance  loc_x  loc_y period  \\\n",
       "shot_id                                                          \n",
       "2                Jump Shot             15   -157      0      1   \n",
       "3                Jump Shot             16   -101    135      1   \n",
       "4                Jump Shot             22    138    175      1   \n",
       "5                     Dunk              0      0      0      2   \n",
       "6                Jump Shot             14   -145    -11      3   \n",
       "\n",
       "                shot_zone_area  \n",
       "shot_id                         \n",
       "2                 Left Side(L)  \n",
       "3         Left Side Center(LC)  \n",
       "4        Right Side Center(RC)  \n",
       "5                    Center(C)  \n",
       "6                 Left Side(L)  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Choosing features by myself logically\n",
    "\n",
    "# choosing features\n",
    "data_prep_myself = data_prep[[\"combined_shot_type\", \"shot_distance\", \"loc_x\", \"loc_y\", \"period\", \"shot_zone_area\"]]\n",
    "data_prep_myself.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Making new features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# total remaining time and last ten seconds\n",
    "data_prep_myself[\"sec_from_period_end\"] = data_prep[\"minutes_remaining\"] * 60 + data_prep[\"seconds_remaining\"]\n",
    "data_prep[\"sec_from_period_end\"] = data_prep[\"minutes_remaining\"] * 60 + data_prep[\"seconds_remaining\"]\n",
    "\n",
    "data_prep.drop(\"minutes_remaining\", axis=1, inplace=True)\n",
    "data_prep.drop(\"seconds_remaining\", axis=1, inplace=True)\n",
    "\n",
    "# Dividing location x by location y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Encoding categorical variables "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Preprocessed data shape: (25697, 20)\n"
     ]
    }
   ],
   "source": [
    "# Encoding my chosen features\n",
    "data_prep_n = data_prep_myself.select_dtypes(include=[\"number\"]).copy()\n",
    "data_prep_ca = data_prep_myself.select_dtypes(include=[\"category\"]).copy()\n",
    "dummiess = pd.get_dummies(data_prep_ca, drop_first=True)\n",
    "data_prep_myself = data_prep_n.join(dummiess)\n",
    "print(\"Preprocessed data shape: {}\".format(data_prep_myself.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Preprocessed data shape: (25697, 77)\n"
     ]
    }
   ],
   "source": [
    "# Encoding all features\n",
    "data_prep_num = data_prep.select_dtypes(include=[\"number\"]).copy()\n",
    "data_prep_cat = data_prep.select_dtypes(include=[\"category\"]).copy()\n",
    "dummies = pd.get_dummies(data_prep_cat, drop_first=True)\n",
    "data_prep = data_prep_num.join(dummies)\n",
    "print(\"Preprocessed data shape: {}\".format(data_prep.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Making a key for which columns are supposed to be standardised later on:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "numerical_cols = list(data_prep_num)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Final dataset\n",
    "Preparing the datasets that will be used in the classifications:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test dataset shape: (5000, 20)\n",
      "Train dataset shape: (20697, 20)\n",
      "Target dataset shape: (20697,)\n"
     ]
    }
   ],
   "source": [
    "# My chosen features\n",
    "\n",
    "test_data_myself = data_prep_myself[test_data_index]\n",
    "X_myself = data_prep_myself[~test_data_index]\n",
    "y = target[~test_data_index]\n",
    "\n",
    "print(\"Test dataset shape: {}\".format(test_data_myself.shape))\n",
    "print(\"Train dataset shape: {}\".format(X_myself.shape))\n",
    "print(\"Target dataset shape: {}\".format(y.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test dataset shape: (5000, 77)\n",
      "Train dataset shape: (20697, 77)\n",
      "Target dataset shape: (20697,)\n"
     ]
    }
   ],
   "source": [
    "# All features\n",
    "\n",
    "test_data = data_prep[test_data_index]\n",
    "X = data_prep[~test_data_index]\n",
    "#y = target[~test_data_index]\n",
    "\n",
    "print(\"Test dataset shape: {}\".format(test_data.shape))\n",
    "print(\"Train dataset shape: {}\".format(X.shape))\n",
    "print(\"Target dataset shape: {}\".format(y.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at different methods for selecting the most important features and then combining the methods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Variance treshold\n",
    "threshold = 0.90\n",
    "vt = VarianceThreshold().fit(X)\n",
    "\n",
    "feat_var_threshold = data_prep.columns[vt.variances_ > threshold * (1-threshold)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# According to random forest classifier\n",
    "cls = RandomForestClassifier()\n",
    "cls.fit(X, y)\n",
    "\n",
    "feature_imp = pd.DataFrame(cls.feature_importances_, index=X.columns, columns=[\"importance\"])\n",
    "feat_imp_20 = feature_imp.sort_values(\"importance\", ascending=False).head(20).index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Recursive feature elimination\n",
    "rfe = RFE(LogisticRegression(), 20)\n",
    "rfe.fit(X, y)\n",
    "\n",
    "feature_rfe_scoring = pd.DataFrame({'feature': X.columns,'score': rfe.ranking_})\n",
    "feat_rfe_20 = feature_rfe_scoring[feature_rfe_scoring['score'] == 1]['feature'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# combining the different important feature methods\n",
    "arr = np.hstack([feat_var_threshold, feat_imp_20, feat_rfe_20])\n",
    "best = np.unique(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# dataframe with the best features\n",
    "X_best = X.ix[:, best]\n",
    "test_data_best = test_data.ix[:, best]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X shape: (20697, 77)\n",
      "X_myself shape: (20697, 20)\n",
      "X_best shape: (20697, 38)\n"
     ]
    }
   ],
   "source": [
    "print(\"X shape: {}\".format(X.shape))\n",
    "print(\"X_myself shape: {}\".format(X_myself.shape))\n",
    "print(\"X_best shape: {}\".format(X_best.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluate different algorithms"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the following algorithms to find the optimal algorithm with the optimal parameters:\n",
    "- Perceptron\n",
    "- Logistic regression\n",
    "- SVC Linear\n",
    "- SVC\n",
    "- Decision tree\n",
    "- Random forest\n",
    "- KNN\n",
    "\n",
    "Defining the algorithms to be used:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def perceptron(**kwargs):\n",
    "    return Perceptron(**kwargs)\n",
    "\n",
    "def logReg(**kwargs):\n",
    "    return LogisticRegression(**kwargs)\n",
    "\n",
    "def svcLin(**kwargs):\n",
    "    kwargs[\"dual\"] = False\n",
    "    return LinearSVC(**kwargs)\n",
    "\n",
    "def svc(**kwargs):\n",
    "    kwargs[\"max_iter\"] = 1000\n",
    "    return SVC(**kwargs)\n",
    "\n",
    "def decTree(**kwargs):\n",
    "    return DecisionTreeClassifier(**kwargs)\n",
    "\n",
    "def randForest(**kwargs):\n",
    "    kwargs[\"n_jobs\"] = -1    # -1 -> number of parallell jobs is equal to the number of CPU cores\n",
    "    return RandomForestClassifier(**kwargs)\n",
    "\n",
    "def knn(**kwargs):\n",
    "    kwargs[\"n_jobs\"] = -1\n",
    "    return KNeighborsClassifier(**kwargs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hyperparameter tuning\n",
    "Finding the optimal hyperparameters among the predefined set of parameters above. Using the method defined here to find the optimal parameters for a specified algorithm. The numerical values are also standardized here using the StandardScaler()."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "splits = 100\n",
    "test_size = 0.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "def param_tuning(X, y, classifier, params, test_sz, splits, scaled_set):\n",
    "    param_grid = ParameterGrid(params)\n",
    "    \n",
    "    train_accuracy = []\n",
    "    test_accuracy = []\n",
    "    params = []\n",
    "    for param_comb in param_grid:\n",
    "                \n",
    "        train_acc = []\n",
    "        test_acc = []\n",
    "        for rs in range(0, splits):\n",
    "            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_sz, random_state=rs,\n",
    "                                                               stratify=y)\n",
    "                                                       \n",
    "            cl = classifier(**param_comb)\n",
    "            \n",
    "            # decision tree and random forest does not need to be scaled\n",
    "            if not isinstance(cl, (RandomForestClassifier, DecisionTreeClassifier)):\n",
    "                sc = StandardScaler()\n",
    "                X_train[scaled_set] = sc.fit_transform(X_train[scaled_set])                        \n",
    "                X_test[scaled_set] = sc.transform(X_test[scaled_set])\n",
    "            \n",
    "            cl.fit(X_train, y_train)\n",
    "            \n",
    "            train_ac = cl.score(X_train, y_train)\n",
    "            test_ac = cl.score(X_test, y_test)\n",
    "            \n",
    "            train_acc.append(train_ac)\n",
    "            test_acc.append(test_ac)\n",
    "            #print(\"Param {}, split {}\".format(param_comb, rs))\n",
    "\n",
    "        train_accuracy.append(np.mean(train_acc))\n",
    "        test_accuracy.append(np.mean(test_acc))\n",
    "        params.append(param_comb)\n",
    "    \n",
    "    return {\"train_accuracy\": train_accuracy, \"test_accuracy\": test_accuracy, \"params\": params}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Defining the hyperparameters to be selected from for each algorithm:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "hyperparameters = {\"perceptron\": {\"n_iter\" : [5, 7]}, \n",
    "                  \"logReg\": {\"C\" : [0.1, 0.4]},\n",
    "                  \"svcLin\": {\"C\": [0.01, 0.02]},\n",
    "                  \"svc\": {\"C\": [0.1, 0.2]},\n",
    "                  \"decTree\": {\"max_depth\": [3]},\n",
    "                  \"randForest\": {\"n_estimators\": [30, 50, 100]},\n",
    "                  \"knn\": {\"n_neighbors\": [2, 9], \"p\": [2, 6]}}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SVC Linear\n",
    "Testing the SVM linear classifier for the optimal value of C, on the three different datasets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "cl = \"svcLin\"\n",
    "results_3_X = param_tuning(X, y, locals()[cl], hyperparameters[cl], test_size, splits, numerical_cols)\n",
    "results_3_X_myself = param_tuning(X_myself, y, locals()[cl], hyperparameters[cl], test_size, splits, numerical_cols)\n",
    "results_3_X_best = param_tuning(X_best, y, locals()[cl], hyperparameters[cl], test_size, splits, numerical_cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset X gave the following values \n",
      "\n",
      "train_accuracy: [0.6157265134258302, 0.615810036584524]\n",
      "test_accuracy: [0.6127665056360708, 0.6125925925925926]\n",
      "params: [{'C': 0.01}, {'C': 0.02}]\n",
      "\n",
      "Dataset X_myself gave the following values \n",
      "\n",
      "train_accuracy: [0.6146628011320495, 0.6147338993580452]\n",
      "test_accuracy: [0.6140225442834139, 0.6139967793880837]\n",
      "params: [{'C': 0.01}, {'C': 0.02}]\n",
      "\n",
      "Dataset X_best gave the following values \n",
      "\n",
      "train_accuracy: [0.6150093186995237, 0.6150880099399461]\n",
      "test_accuracy: [0.6131884057971014, 0.6132560386473429]\n",
      "params: [{'C': 0.01}, {'C': 0.02}]\n"
     ]
    }
   ],
   "source": [
    "print(\"Dataset X gave the following values \\n\")\n",
    "\n",
    "for keys, values in results_3_X.items():\n",
    "    print(\"{}: {}\".format(keys, values))\n",
    "    \n",
    "print(\"\\nDataset X_myself gave the following values \\n\")\n",
    "\n",
    "for keys, values in results_3_X_myself.items():\n",
    "    print(\"{}: {}\".format(keys, values))\n",
    "    \n",
    "print(\"\\nDataset X_best gave the following values \\n\")\n",
    "\n",
    "for keys, values in results_3_X_best.items():\n",
    "    print(\"{}: {}\".format(keys, values))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Finalizing the submission\n",
    "Retraining the best model with the best parameters on the whole dataset and predicting the results of the testing dataset. \\n\n",
    "\n",
    "The best classifier when uploading it to kaggle was the SVC Linear classifier with the C parameter of 0.01 and the X dataset. \\n\n",
    "\n",
    "The best classifier I got in this notebook was the SVC Linear classifier with a C parameter of 0.01 and the X_myself dataset. This is the one I have chosen to use on Kaggle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearSVC(C=0.01, class_weight=None, dual=False, fit_intercept=True,\n",
       "     intercept_scaling=1, loss='squared_hinge', max_iter=1000,\n",
       "     multi_class='ovr', penalty='l2', random_state=None, tol=0.0001,\n",
       "     verbose=0)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_params = {\"svcLin\": {\"C\": 0.01}}\n",
    "\n",
    "X_end = X_myself.copy()\n",
    "X_test_end = test_data_myself.copy()\n",
    "\n",
    "sc = StandardScaler()\n",
    "X_end[numerical_cols] = sc.fit_transform(X_end[numerical_cols])                        \n",
    "X_test_end[numerical_cols] = sc.transform(X_test_end[numerical_cols])\n",
    "\n",
    "model = svcLin(**best_params[\"svcLin\"])\n",
    "model.fit(X_end, y) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "# make predictions for the test_data and submit these predictions\n",
    "preds = model.predict(X_test_end)\n",
    "\n",
    "submission = pd.DataFrame()\n",
    "submission[\"shot_id\"] = test_data.index\n",
    "submission[\"shot_made_flag\"]= preds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "submission.to_csv(\"submission_svcLin_X_myself_final.csv\",index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
